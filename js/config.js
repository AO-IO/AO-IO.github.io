// HOW NOT TO CODE 101

let form = document.getElementById('form-generate');

form.addEventListener('submit',function(e){

    let modal = document.querySelector('.modal');

  
    document.getElementById('loading').style.display = "block";
    document.getElementById('download').style.display = "none";
    document.getElementById('container-result').style.display = "none";
     document.querySelector('.modal-title').textContent = "GENERATING ...";
    

    setTimeout(generateCfg,1000)
    
    e.preventDefault();
});
let textareaInput = document.createElement('textarea');
textareaInput.setAttribute('name','result');
textareaInput.setAttribute('id','result');
textareaInput.setAttribute('rows','17');
textareaInput.setAttribute('readonly','true');

textareaInput.className = "form-control result bg-dark";
function generateCfg(){

let servername = document.getElementById('servername');
let max = document.getElementById('max');
let port = document.getElementById('port');
let maps = document.getElementById('maps')
// let mp_value = Array.from(maps.selectedOptions).map(option => option.value);
let rcpass = document.getElementById('rcpass');
let chat = document.getElementById('chat');
let kick = document.getElementById('kick');
let inactive = document.getElementById('inactive');
let loading = document.getElementById('loading');
let activity = document.getElementById('activity');
let flood2 = document.getElementById('flood2');
let loadTime = window.performance.timing.domContentLoadedEventEnd- window.performance.timing.navigationStart;

    Snackbar.show({
        text: "GENERATED successfully",
        pos: 'top-right'
    });


    
    let header0 = "// PLUTONIUM MW3 CFG GENERATOR  \n";
    let header1 = "// Modern Warfare 3 Server Configuration";
    let header2 = " //////////////////////////////////////////////////////////";
    let header3 = "// Server command-line parameters (this section is for documentation only)";
    let header4 = "// Specify server configuration file (this file)";
    let header5 = '//+set sv_config "filename" (default "server.cfg")';
    let codedi = "// Specify server visibility (1 = LAN, 2 = Internet (default) )";
    let dedi = "//+set dedicated 1";
    let portco = `// Open game port (Steam-visible server game port) \n  +set net_queryPort ${port.value === "" ? 27014 : port.value} \n`
    let secure = "// Secure game port \n //+set net_port 27015 \n    "
    let steamp = "// Steam authentication port \n //+set net_authPort 8766 \n//+set net_port 27015 \n "
    let masterp = "// Steam master server (server browser) port \n//+set net_masterServerPort 27016\n "
    let configTtile = "//////////////////////////////////////////////////////////// \n //Server.cfg-configurable settings \n"
    let svhost =`
//Server host name. This should always be set by the server admin \n seta sv_hostname "${servername.value === "" ? "SERVER NAME GENERATED BY IW5 CFG GENERATOR" : servername.value}" \n` ;
    let mprot = `
// Dedicated server play list (DSPL) specifying server map rotation.
// Valid game options are controlled via DSR (dedicated server recipe) specified in the DSPL.\n
seta sv_maprotation ${(maps.value == "") ? '"default"' : `"${maps.value}"` } \n`; 
    let mxpl = `
// Maximum number of clients that may connect to this server (range 1-18)\n
seta sv_maxclients ${(max.value =="" ? 16 : max.value)} \n`
    let pass_value = `
// Server password. If set, users will be prompted on join attempt.\n
seta g_password "${password.value == "" ? "" : password.value}"`

    let maxpr = `

// Maximum number of private clients allowed on the server (range 0-18 (clamped to sv_maxclients) )\n
seta sv_privateClients 0 \n`

    let prvpass = `
// Password for the private slots on this server. If set, users will be prompted on join attempt.\n
//    Users providing this password will have access to all slots.\m
//    Users providing an incorrect password will have access to the (sv_maxClients - sv_privateClients) public slots.\n
seta sv_privatePassword "" \n`

    let rcon = `
// Remote console password. If set, users will have access to a remote console, allowing server administration from a connected client.\n
seta rcon_password "${rcpass.value =="" ? "12345" : rcpass.value}" \n`

    let voice = `
// Server voice chat configuration ( 0 = "No Chat", 1 = "Free Chat", 2 = "Team Chat" (default) )\n
seta sv_voice 2 \n
    `
    let vote = `
// Toggle voting for [player kick/map restart/next map] (0 or 1 (default) )\n
seta g_allowVote ${kick.getAttribute('aria-pressed') === "false" ? 0 : 1} \n`

    let dead = `
// Toggle allowing dead players to chat with living players (0 (default) or 1) \n
seta g_deadChat ${chat.getAttribute('aria-pressed') === "false" ? 0 : 1} \n`

    let inact = `
// Time in seconds before the server will kick a user for inactivity (range 0 - 10000)\n
seta g_inactivity ${inactive.value ==="" ? 120 : inactive.value} \n`

    let ban = `
// Time in seconds for a player temporary ban (on kick/tempban) (range 0 - 3600) \n
seta sv_kickBanTime 300 \n`

    let flood = `

// Toggle flood protection (throttling of user commands - should be enabled for non-password-protected Internet servers) (0 or 1 (default)) \n
seta sv_floodProtect ${flood2.getAttribute('aria-pressed') === "false" ? 0 : 1} \n`

    svhost.replace(/\r?\n/g, '<br />');


    textareaInput.value = 
    
    header0+header1 +'\n'+ header2 + '\n' + header3+'\n'+ header4 +'\n'
    +header5+'\n'
    +codedi+
    '\n'+
    dedi+
    '\n'+
    portco+
    secure+
    steamp+
    masterp+
    configTtile
    +svhost
    +mprot
    +mxpl
    +pass_value
    +maxpr
    +prvpass
    +rcon
    +voice
    +vote
    +dead
    +inact
    +ban
    +flood
   

    document.getElementById('container-result').appendChild(textareaInput);
    document.getElementById('loading').style.display = "none";
    document.querySelector('.modal-title').textContent = "GENERATED in "+ loadTime / 1000  + " Seconds";
    document.getElementById('download').style.display = "block";

   
    document.getElementById('container-result').style.display = "block";
   



}

